name: CI
on: push

jobs:
  ci:
    name: Jest Unit Tests, Type Checking, Linting, Playwright End to End Tests
    runs-on: ubuntu-latest # or macos-latest, windows-latest
    environment: Marketplace Layerforge
    timeout-minutes: 30
    # TODO: Update environment variables with your own database credentials
    env:
      PGHOST: localhost
      PGDATABASE: marketplace_printforge
      PGUSERNAME: marketplace_printforge
      PGPASSWORD: marketplace_printforge
      NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: dshcxl5an
      NEXT_PUBLIC_CLOUDINARY_PRESET_NAME: ml_default
      NEXT_PUBLIC_CLOUDINARY_API_KEY: ${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }}
      NEXT_PUBLIC_CLOUDINARY_API_SECRET: ${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_SECRET }}
      CLOUDINARY_CLOUD_NAME: dshcxl5an
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
    steps:
      - name: Start preinstalled PostgreSQL on Ubuntu
        run: |
          sudo systemctl start postgresql.service
          pg_isready
      - name: Create database user
        run: |
          sudo -u postgres psql --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"
      - name: Create database and allow user
        run: |
          sudo -u postgres createdb --owner=$PGUSERNAME $PGDATABASE
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4

      # Use the official setup-node action (sets up Node.js):
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install
      - name: Jest unit tests
        run: pnpm jest
      - name: Run database migrations
        run: pnpm migrate up
      - name: Build Next.js app (types needed for TSC and ESLint)
        run: pnpm build
      - name: Check TypeScript Types
        run: pnpm tsc
      - name: Lint with ESLint
        run: pnpm eslint . --max-warnings 0
      - name: Lint with Stylelint
        run: pnpm stylelint '**/*.{css,scss,less,js,tsx}'

      # Cache and install Playwright browser binaries, modified version of:
      # https://github.com/microsoft/playwright/issues/7249#issuecomment-1154603556
      # https://github.com/microsoft/playwright/issues/7249#issuecomment-1385567519
      # https://playwrightsolutions.com/playwright-github-action-to-cache-the-browser-binaries/
      - name: Get installed Playwright version for cache key
        run: echo "PLAYWRIGHT_VERSION=$(yq eval '.version' --output-format=yaml ./node_modules/@playwright/test/package.json)" >> $GITHUB_ENV
      - name: Cache Playwright browser binaries
        uses: actions/cache@v4
        id: playwright-browser-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright browsers only on cache miss
        run: pnpm playwright install --with-deps chromium
        if: steps.playwright-browser-cache.outputs.cache-hit != 'true'

      - name: Run tests
        run: pnpm playwright test
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-videos
          path: playwright/test-results/

  cd:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    if: github.ref == 'refs/heads/main'
    environment: Marketplace Layerforge
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          flyctl deploy --remote-only \
          --build-secret STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
          --build-secret NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dshcxl5an \
          --build-secret NEXT_PUBLIC_CLOUDINARY_PRESET_NAME=ml_default \
          --build-secret NEXT_PUBLIC_CLOUDINARY_API_KEY=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }} \
          --build-secret NEXT_PUBLIC_CLOUDINARY_API_SECRET=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_SECRET }} \
